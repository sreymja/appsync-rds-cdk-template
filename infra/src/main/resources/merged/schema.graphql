schema { 
  query: Query 
  mutation: Mutation   
}

type Query {
  getAuditById(id: Int!): [Audit]
  audits: [Audit]
  getCategoryById(id: Int!): [Category]
  categories: [Category]
  getCommentById(id: Int!): [Comment]
  comments: [Comment]
  getPriorityById(id: Int!): [Priority]
  priorities: [Priority]
  getStatusById(id: Int!): [Status]
  statuses: [Status]
  getTicketById(id: Int!): [Ticket]
  tickets: [Ticket]
  getUserById(id: Int!): [User]
  users: [User]
  getTicketsByStatus(statusId: Int!): [Ticket]
  getTicketsByUser(userId: Int!): [Ticket]
  getTicketsByCategory(categoryId: Int!): [Ticket]
  searchUserByName(name: String!): [User]
}

type Mutation {
  createAudit(input: AuditCreateInput): [Audit]
  updateAudit(audit: AuditUpdateInput): [Audit]
  createCategory(input: CategoryCreateInput): [Category]
  updateCategory(category: CategoryUpdateInput): [Category]
  createComment(input: CommentCreateInput): [Comment]
  updateComment(comment: CommentUpdateInput): [Comment]
  createPriority(input: PriorityCreateInput): [Priority]
  updatePriority(priority: PriorityUpdateInput): [Priority]
  createStatus(input: StatusCreateInput): [Status]
  updateStatus(status: StatusUpdateInput): [Status]
  createTicket(input: TicketCreateInput): [Ticket]
  updateTicket(ticket: TicketUpdateInput): [Ticket]
  createUser(input: UserCreateInput): [User]
  updateUser(user: UserUpdateInput): [User]
  setStatusOfTicket(id: ID!, statusId: Int!): [Ticket]
  setPriorityOfTicket(id: ID!, priorityId: Int!): [Ticket]
  setUserOfTicket(id: ID!, userId: Int!): [Ticket]
  setCategoryOfTicket(id: ID!, categoryId: Int!): [Ticket]
}

type Audit {
  id: Int!
  operation: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

type Category {
  id: Int!
  name: String!
  tickets: [Ticket]
}

type Comment {
  id: Int!
  content: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

type Priority {
  id: Int!
  name: String!
  tickets: [Ticket]
}

type Status {
  id: Int!
  name: String!
  tickets: [Ticket]
}

type Ticket {
  id: Int!
  subject: String!
  content: String!
  status_id: Int!
  priority_id: Int!
  user_id: Int!
  category_id: Int!
  created_at: String!
  updated_at: String!
  completed_at: String
  audits: [Audit]
  comments: [Comment]
}

type User {
  id: Int!
  name: String!
  audits: [Audit]
  comments: [Comment]
  tickets: [Ticket]
}

input AuditUpdateInput {
  id: Int!
  operation: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

input CategoryUpdateInput {
  id: Int!
  name: String!
}

input CommentUpdateInput {
  id: Int!
  content: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

input PriorityUpdateInput {
  id: Int!
  name: String!
}

input StatusUpdateInput {
  id: Int!
  name: String!
}

input TicketUpdateInput {
  id: Int!
  subject: String!
  content: String!
  status_id: Int!
  priority_id: Int!
  user_id: Int!
  category_id: Int!
  created_at: String!
  updated_at: String!
  completed_at: String
}

input UserUpdateInput {
  id: Int!
  name: String!
}

input AuditCreateInput {
  operation: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

input CategoryCreateInput {
  name: String!
}

input CommentCreateInput {
  content: String!
  user_id: Int!
  ticket_id: Int!
  created_at: String!
  updated_at: String!
}

input PriorityCreateInput {
  name: String!
}

input StatusCreateInput {
  name: String!
}

input TicketCreateInput {
  subject: String!
  content: String!
  status_id: Int!
  priority_id: Int!
  user_id: Int!
  category_id: Int!
  created_at: String!
  updated_at: String!
  completed_at: String
}

input UserCreateInput {
  name: String!
}
